import 'package:flutter/material.dart';
import '../models/playing_card.dart';
import '../models/deck.dart';
import '../widgets/card_widget.dart';

class BlackjackScreen extends StatefulWidget {
  @override
  _BlackjackScreenState createState() => _BlackjackScreenState();
}

class _BlackjackScreenState extends State<BlackjackScreen> {
  List<PlayingCard> playerCards = [];
  List<PlayingCard> dealerCards = [];
  List<PlayingCard> deck = [];
  String result = '';
  bool gameOver = true; // –≥—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞—Ç–∞

  bool useFullDeck = false;
  Color playerColor = Colors.blue; // –∑–∞–º—ñ—Å—Ç—å —á–µ—Ä–≤–æ–Ω–æ–≥–æ

  PlayingCard? flyingCard;
  bool isForPlayer = true;
  bool deckHighlight = false;

  int get totalPlayer => playerCards.fold(0, (sum, card) => sum + card.value);
  int get totalDealer => dealerCards.fold(0, (sum, card) => sum + card.value);

  void startGame() {
    deckHighlight = true;
    deck = createDeck(fullDeck: useFullDeck);
    playerCards.clear();
    dealerCards.clear();
    flyingCard = null;
    result = '';
    gameOver = false;
    setState(() {});

    // –í–∏–º–∏–∫–∞—î–º–æ –ø—ñ–¥—Å–≤—ñ—Ç–∫—É —á–µ—Ä–µ–∑ 500ms
    Future.delayed(Duration(milliseconds: 500), () {
      setState(() {
        deckHighlight = false;
      });
    });
  }

  void playerDraw() async {
    if (gameOver || deck.isEmpty) return;

    setState(() {
      flyingCard = deck.removeAt(0);
      isForPlayer = true;
    });

    await Future.delayed(Duration(milliseconds: 500));

    setState(() {
      playerCards.add(flyingCard!);
      flyingCard = null;

      if (dealerCards.isEmpty) dealerCards.add(deck.removeAt(0));

      if (totalPlayer > 21) {
        result = '–ü–µ—Ä–µ–±—ñ—Ä! Dealer –≤–∏–≥—Ä–∞–≤ üò¢';
        gameOver = true;
      } else {
        dealerDraw();
      }
    });
  }

  void dealerDraw() async {
    if (gameOver || deck.isEmpty) return;

    if (totalDealer < 17) {
      setState(() {
        flyingCard = deck.removeAt(0);
        isForPlayer = false;
      });

      await Future.delayed(Duration(milliseconds: 500));

      setState(() {
        dealerCards.add(flyingCard!);
        flyingCard = null;
      });

      dealerDraw();
    }
  }

  void playerStay() {
    if (gameOver) return;

    setState(() {
      while (totalDealer < 17 && deck.isNotEmpty) dealerCards.add(deck.removeAt(0));

      if (totalDealer > 21 || totalPlayer > totalDealer)
        result = '–¢–∏ –≤–∏–≥—Ä–∞–≤ üéâ';
      else if (totalDealer > totalPlayer)
        result = 'Dealer –≤–∏–≥—Ä–∞–≤ üò¢';
      else
        result = '–ù—ñ—á–∏—è ü§ù';

      gameOver = true;
    });
  }

  Widget deckWidget({Color? patternColor, bool highlight = false}) {
    return AnimatedContainer(
      duration: Duration(milliseconds: 300),
      width: 60,
      height: 90,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: highlight ? Colors.purple : Colors.black, // –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∞
            blurRadius: highlight ? 10 : 4,
            offset: Offset(2, 2),
          )
        ],
      ),
      child: CustomPaint(
        painter: DeckPatternPainter(
          patternColor: patternColor ?? Colors.purple[300]!,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Blackjack 21')),
      body: Stack(
        children: [
          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(height: 10),
              // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('–ö–æ–ª–æ–¥–∞: '),
                  Switch(
                      value: useFullDeck,
                      onChanged: (val) {
                        setState(() {
                          useFullDeck = val;
                        });
                      }),
                  Text(useFullDeck ? '54 –∫–∞—Ä—Ç–∏' : '36 –∫–∞—Ä—Ç'),
                  SizedBox(width: 20),
                  ElevatedButton(
                    onPressed: gameOver ? startGame : null,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: gameOver ? Colors.yellow : Colors.red,
                    ),
                    child: Text(gameOver ? '–ù–æ–≤–∞ –≥—Ä–∞' : '–ì—Ä–∞ –π–¥–µ...'),
                  ),
                ],
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('–ö–æ–ª—ñ—Ä –≥—Ä–∞–≤—Ü—è: '),
                  DropdownButton<Color>(
                    value: playerColor,
                    items: [
                      DropdownMenuItem(child: Text('–°–∏–Ω—ñ–π'), value: Colors.blue),
                      DropdownMenuItem(child: Text('–ó–µ–ª–µ–Ω–∏–π'), value: Colors.green),
                      DropdownMenuItem(child: Text('–ñ–æ–≤—Ç–∏–π'), value: Colors.orange),
                    ],
                    onChanged: (val) {
                      if (val != null) setState(() => playerColor = val);
                    },
                  )
                ],
              ),
              SizedBox(height: 20),
              // –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
              Expanded(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // –î–∏–ª–µ—Ä –∑–≤–µ—Ä—Ö—É
                    Column(
                      children: [
                        Text('Dealer', style: TextStyle(fontSize: 20)),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: dealerCards
                              .map<Widget>((c) => CardWidget(
                            card: c,
                            colorOverride: playerColor,
                            isFaceDown: !gameOver,
                            usePatternForBack: true,
                          ))
                              .toList(),
                        ),
                        Text('–°—É–º–∞: ${gameOver ? totalDealer : '?'}'),
                      ],
                    ),
                    SizedBox(height: 30),

                    // –ö–æ–ª–æ–¥–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                    Stack(
                      alignment: Alignment.center,
                      children: [
                        deckWidget(
                          patternColor: playerColor,
                          highlight: deckHighlight,
                        ),
                        if (flyingCard != null)
                          AnimatedAlign(
                            duration: Duration(milliseconds: 500),
                            alignment: isForPlayer ? Alignment(0, 0.5) : Alignment(0, -0.5),
                            child: CardWidget(
                              card: flyingCard!,
                              colorOverride: isForPlayer ? playerColor : Colors.black,
                              isFaceDown: !isForPlayer,
                            ),
                          ),
                      ],
                    ),
                    SizedBox(height: 30),

                    // –ì—Ä–∞–≤–µ—Ü—å –∑–Ω–∏–∑—É
                    Column(
                      children: [
                        Text('–ì—Ä–∞–≤–µ—Ü—å', style: TextStyle(fontSize: 20)),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: playerCards
                              .map<Widget>((c) => CardWidget(
                            card: c,
                            colorOverride: playerColor,
                          ))
                              .toList(),
                        ),
                        Text('–°—É–º–∞: $totalPlayer'),
                      ],
                    ),
                  ],
                ),
              ),
              SizedBox(height: 20),
              // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
              if (!gameOver) ...[
                ElevatedButton(onPressed: playerDraw, child: Text('–í–∑—è—Ç–∏ –∫–∞—Ä—Ç—É')),
                ElevatedButton(onPressed: playerStay, child: Text('–ó–∞–ª–∏—à–∏—Ç–∏—Å—è')),
              ],
              if (gameOver) ...[
                SizedBox(height: 10),
                Text(result, style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
              ],
              SizedBox(height: 20),
            ],
          ),
        ],
      ),
    );
  }
}

// –ö–ª–∞—Å –¥–ª—è –≤—ñ–∑–µ—Ä—É–Ω–∫–∞ –∫–æ–ª–æ–¥–∏
class DeckPatternPainter extends CustomPainter {
  final Color patternColor;

  DeckPatternPainter({required this.patternColor});

  @override
  void paint(Canvas canvas, Size size) {
    // –ì—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω
    Rect rect = Offset.zero & size;
    Paint bgPaint = Paint()
      ..shader = LinearGradient(
        colors: [Colors.purple[900]!, Colors.purple[100]!],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ).createShader(rect);

    canvas.drawRRect(
        RRect.fromRectAndRadius(rect, Radius.circular(8)), bgPaint);

    // –†–æ–º–±—ñ—á–Ω–∞ —Å—ñ—Ç–∫–∞
    double padding = 5;
    double step = 12;

    Paint linePaint = Paint()
      ..color = patternColor
      ..strokeWidth = 1.5;

    for (double y = padding; y < size.height - padding; y += step) {
      for (double x = padding; x < size.width - padding; x += step) {
        canvas.drawLine(
            Offset(x, y), Offset(x + step / 2, y + step / 2), linePaint);
        canvas.drawLine(
            Offset(x + step / 2, y), Offset(x, y + step / 2), linePaint);
      }
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
